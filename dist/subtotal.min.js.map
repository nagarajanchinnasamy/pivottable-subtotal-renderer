{"version":3,"sources":["subtotal.coffee"],"names":["callWithJQuery","extend","child","parent","ctor","this","constructor","key","hasProp","call","prototype","__super__","pivotModule","exports","module","require","define","amd","jQuery","$","SubtotalPivotData","SubtotalRenderer","aggregatorTemplates","subtotalAggregatorTemplates","usFmtPct","superClass","input","opts","processKey","record","totals","keys","attrs","getAggregator","addKey","attr","flatKey","k","len","ref","length","push","join","String","fromCharCode","slice","processRecord","colKey","fColKey","fRowKey","flatColKey","flatRowKey","i","j","m","n","results","rowKey","allTotal","rowTotals","rowKeys","rowAttrs","_this","aggregator","colTotals","colKeys","colAttrs","tree","results1","l","ref1","pivotUtilities","PivotData","pivotData","addClass","arrowCollapsed","arrowExpanded","buildColHeader","buildColHeaderHeader","buildColHeaderHeaders","buildColHeaderHeadersClickEvents","buildColTotals","buildColTotalsHeader","buildGrandTotal","buildRowHeader","buildRowHeaderHeaders","buildRowHeaderHeadersClickEvents","buildRowTotalsHeader","buildValues","classColCollapsed","classColExpanded","classColHide","classColShow","classCollapsed","classExpanded","classRowCollapsed","classRowExpanded","classRowHide","classRowShow","clickStatusCollapsed","clickStatusExpanded","colDisableAfter","colDisableFrom","collapseCol","collapseColsAt","collapseRow","collapseRowsAt","collapseShowColSubtotal","collapseShowRowSubtotal","colsCollapseAt","createElement","defaults","expandChildCol","expandChildRow","expandCol","expandColsAt","expandHideColSubtotal","expandHideRowSubtotal","expandRow","expandRowsAt","expandShowColSubtotal","expandShowRowSubtotal","getTableEventHandlers","hasClass","hideDescendantCol","hideDescendantRow","isColDisable","isColDisableExpandCollapse","isColHideOnExpand","isDisplayOnRight","isDisplayOnTop","isRowDisable","isRowDisableExpandCollapse","isRowHideOnExpand","main","processKeys","ref2","ref3","ref4","ref5","ref6","ref7","ref8","ref9","removeClass","replaceClass","rowDisableAfter","rowDisableFrom","rowsCollapseAt","setAttributes","setColInitParams","setRowInitParams","showChildCol","showChildRow","toggleCol","toggleColHeaderHeader","toggleRow","toggleRowHeaderHeader","table","clickCallback","localeStrings","rowSubtotalDisplay","disableSubtotal","disableAfter","hideOnExpand","disableExpandCollapse","displayOnTop","colSubtotalDisplay","displayOnRight","getRowKeys","getColKeys","element","className","regExp","RegExp","match","name","ref10","split","replace","replaceClassName","byClassName","value","rowValues","colValues","event","eventHandlers","filters","handler","e","elementType","textContent","attributes","val","document","setAttribute","addEventListener","a","v","keysArr","lastIdx","row","children","reduce","val0","k0","col","acc","curVal","curIdx","arr","node","descendants","text","firstLeaf","leaves","th","childrenSpan","init","colArrow","colClass","colClickStatus","thead","colHeaderHeaders","tr","colAttr","appendChild","clickStatus","expandedCount","nHeaders","c","colspan","rowspan","colHeaderCols","onclick","window","target","getAttribute","h","chKey","firstChild","hh","ref11","counter","colSpan","rowSpan","parseInt","sTh","style","display","rowArrow","rowClass","rowClickStatus","rowHeaderHeaders","rowAttr","rowHeaderRows","tbody","insertBefore","sTr","colHeader","colInit","isColSubtotal","isRowSubtotal","len1","rowHeader","rowInit","td","totalAggregator","format","data-value","data-rownode","data-colnode","data-row","data-rowcol","clsNames","data-for","result","d","closest","find","css","not","colHeaderHeader","p","ref12","ch","gch","cell","cells","getElementsByTagName","r","nShown","scrollIntoView","idx","nAttrs","nCols","indexOf","nRows","rowHeaderHeader","colHeaders","rowHeaders","subtotal_renderers","Table With Subtotal","pvtData","Table With Subtotal Bar Chart","barchart","Table With Subtotal Heatmap","heatmap","Table With Subtotal Row Heatmap","Table With Subtotal Col Heatmap","numberFormat","digitsAfterDecimal","scaler","suffix","fractionOf","wrapped","type","formatter","x","arguments","data","selector","inner","apply","numInputs","subtotal_aggregators","tpl","sTpl","Sum As Fraction Of Parent Row","sum","Sum As Fraction Of Parent Column","Count As Fraction Of Parent Row","count","Count As Fraction Of Parent Column"],"mappings":"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","file":"subtotal.min.js","sourcesContent":["callWithJQuery = (pivotModule) ->\r\n    if typeof exports is \"object\" and typeof module is \"object\" # CommonJS\r\n        pivotModule require(\"jquery\")\r\n    else if typeof define is \"function\" and define.amd # AMD\r\n        define [\"jquery\"], pivotModule\r\n    # Plain browser env\r\n    else\r\n        pivotModule jQuery\r\n\r\ncallWithJQuery ($) ->\r\n\r\n    class SubtotalPivotData extends $.pivotUtilities.PivotData\r\n        constructor: (input, opts) ->\r\n            super input, opts\r\n\r\n        processKey = (record, totals, keys, attrs, getAggregator) ->\r\n            key = []\r\n            addKey = false\r\n            for attr in attrs\r\n                key.push record[attr] ? \"null\"\r\n                flatKey = key.join String.fromCharCode(0)\r\n                if not totals[flatKey]\r\n                    totals[flatKey] = getAggregator key.slice()\r\n                    addKey = true\r\n                totals[flatKey].push record\r\n            keys.push key if addKey\r\n            return key\r\n\r\n        processRecord: (record) -> #this code is called in a tight loop\r\n            rowKey = []\r\n            colKey = []\r\n\r\n            @allTotal.push record\r\n            rowKey = processKey record, @rowTotals, @rowKeys, @rowAttrs, (key) =>\r\n                return @aggregator this, key, []\r\n            colKey = processKey record, @colTotals, @colKeys, @colAttrs, (key) =>\r\n                return @aggregator this, [], key\r\n            m = rowKey.length-1\r\n            n = colKey.length-1\r\n            return if m < 0 or n < 0\r\n            for i in [0..m]\r\n                fRowKey = rowKey.slice(0, i+1)\r\n                flatRowKey = fRowKey.join String.fromCharCode(0)\r\n                @tree[flatRowKey] = {} if not @tree[flatRowKey]\r\n                for j in [0..n]\r\n                    fColKey = colKey.slice 0, j+1\r\n                    flatColKey = fColKey.join String.fromCharCode(0)\r\n                    @tree[flatRowKey][flatColKey] = @aggregator this, fRowKey, fColKey if not @tree[flatRowKey][flatColKey]\r\n                    @tree[flatRowKey][flatColKey].push record\r\n\r\n    $.pivotUtilities.SubtotalPivotData = SubtotalPivotData\r\n\r\n    SubtotalRenderer = (pivotData, opts) ->\r\n        defaults =\r\n            table: clickCallback: null\r\n            localeStrings: totals: \"Totals\"\r\n\r\n        opts = $.extend true, {}, defaults, opts\r\n\r\n        isRowDisable = opts.rowSubtotalDisplay?.disableSubtotal\r\n        rowDisableAfter = if typeof opts.rowSubtotalDisplay?.disableAfter isnt 'undefined' then opts.rowSubtotalDisplay.disableAfter else 9999\r\n        if typeof opts.rowSubtotalDisplay?disableFrom is 'undefined'\r\n            rowDisableFrom = if isRowDisable then 0 else rowDisableAfter + 1\r\n        else\r\n            rowDisableFrom = opts.rowSubtotalDisplay.disableFrom\r\n        isRowHideOnExpand = opts.rowSubtotalDisplay?.hideOnExpand\r\n        isRowDisableExpandCollapse = opts.rowSubtotalDisplay?.disableExpandCollapse\r\n        isDisplayOnTop = if typeof opts.rowSubtotalDisplay?.displayOnTop isnt 'undefined' then opts.rowSubtotalDisplay.displayOnTop else true\r\n        isColDisable = opts.colSubtotalDisplay?.disableSubtotal\r\n        isColHideOnExpand = opts.colSubtotalDisplay?.hideOnExpand\r\n        isColDisableExpandCollapse = opts.colSubtotalDisplay?.disableExpandCollapse\r\n        colDisableAfter = if typeof opts.colSubtotalDisplay?.disableAfter isnt 'undefined' then opts.colSubtotalDisplay.disableAfter else 9999\r\n        if typeof opts.colSubtotalDisplay?disableFrom is 'undefined'\r\n            colDisableFrom = if isColDisable then 0 else colDisableAfter + 1\r\n        else\r\n            colDisableFrom = opts.colSubtotalDisplay.disableFrom\r\n        isDisplayOnRight = if typeof opts.colSubtotalDisplay?.displayOnRight isnt 'undefined' then opts.rowSubtotalDisplay.displayOnRight else true\r\n        arrowCollapsed = opts.arrowCollapsed ?= \"\\u25B6\"\r\n        arrowExpanded = opts.arrowExpanded ?= \"\\u25E2\"\r\n        colsCollapseAt = if typeof opts.collapseColsAt isnt 'undefined' then opts.collapseColsAt else 9999\r\n        rowsCollapseAt = if typeof opts.collapseRowsAt isnt 'undefined' then opts.collapseRowsAt else 9999\r\n\r\n        colAttrs = pivotData.colAttrs\r\n        rowAttrs = pivotData.rowAttrs\r\n        rowKeys = pivotData.getRowKeys()\r\n        colKeys = pivotData.getColKeys()\r\n        tree = pivotData.tree\r\n        rowTotals = pivotData.rowTotals\r\n        colTotals = pivotData.colTotals\r\n        allTotal = pivotData.allTotal\r\n\r\n        classRowExpanded = \"rowexpanded\"\r\n        classRowCollapsed = \"rowcollapsed\"\r\n        classRowHide = \"rowhide\"\r\n        classRowShow = \"rowshow\"\r\n        classColExpanded = \"colexpanded\"\r\n        classColCollapsed = \"colcollapsed\"\r\n        classColHide = \"colhide\"\r\n        classColShow = \"colshow\"\r\n        clickStatusExpanded = \"expanded\"\r\n        clickStatusCollapsed = \"collapsed\"\r\n        classExpanded = \"expanded\"\r\n        classCollapsed = \"collapsed\"\r\n\r\n\r\n        isDisplayOnTop = false;\r\n\r\n        # Based on http://stackoverflow.com/questions/195951/change-an-elements-class-with-javascript -- Begin\r\n        hasClass = (element, className) ->\r\n            regExp = new RegExp \"(?:^|\\\\s)\" + className + \"(?!\\\\S)\", \"g\"\r\n            element.className.match(regExp) isnt null\r\n\r\n        removeClass = (element, className) ->\r\n            for name in className.split \" \"\r\n                regExp = new RegExp \"(?:^|\\\\s)\" + name + \"(?!\\\\S)\", \"g\"\r\n                element.className = element.className.replace regExp, ''\r\n\r\n        addClass = (element, className) ->\r\n            for name in className.split \" \"\r\n                element.className += (\" \" + name) if not hasClass element, name\r\n\r\n        replaceClass = (element, replaceClassName, byClassName) ->\r\n            removeClass element, replaceClassName\r\n            addClass element, byClassName\r\n        # Based on http://stackoverflow.com/questions/195951/change-an-elements-class-with-javascript -- End\r\n\r\n        getTableEventHandlers = (value, rowValues, colValues) ->\r\n            return if not opts.table and not opts.table.eventHandlers\r\n            eventHandlers = {}\r\n            for own event, handler of opts.table.eventHandlers\r\n                filters = {}\r\n                filters[attr] = colValues[i] for own i, attr of colAttrs when colValues[i]?\r\n                filters[attr] = rowValues[i] for own i, attr of rowAttrs when rowValues[i]?\r\n                eventHandlers[event] = (e) -> handler(e, value, filters, pivotData)\r\n            return eventHandlers\r\n\r\n        createElement = (elementType, className, textContent, attributes, eventHandlers) ->\r\n            e = document.createElement elementType\r\n            e.className = className if className?\r\n            e.textContent = textContent if textContent?\r\n            e.setAttribute attr, val for own attr, val of attributes if attributes?\r\n            e.addEventListener event, handler for own event, handler of eventHandlers if eventHandlers?\r\n            return e\r\n\r\n        setAttributes = (e, attrs) ->\r\n            for own a, v of attrs\r\n                e.setAttribute a, v \r\n\r\n        processKeys = (keysArr, className) ->\r\n            lastIdx = keysArr[0].length-1\r\n            tree = children: []\r\n            row = 0\r\n            keysArr.reduce(\r\n                (val0, k0) => \r\n                    col = 0\r\n                    k0.reduce(\r\n                        (acc, curVal, curIdx, arr) => \r\n                            if not acc[curVal]\r\n                                key = k0.slice 0, col+1\r\n                                acc[curVal] =\r\n                                    row: row\r\n                                    col: col\r\n                                    descendants: 0\r\n                                    children: []\r\n                                    text: curVal\r\n                                    key: key \r\n                                    flatKey: key.join String.fromCharCode(0) \r\n                                    firstLeaf: null \r\n                                    leaves: 0\r\n                                    parent: if col isnt 0 then acc else null\r\n                                    th: createElement \"th\", className, curVal\r\n                                    childrenSpan: 0\r\n                                acc.children.push curVal\r\n                            if col > 0 \r\n                                acc.descendants++\r\n                            col++\r\n                            if curIdx == lastIdx\r\n                                node = tree\r\n                                for i in [0..lastIdx-1] when lastIdx > 0\r\n                                    node[k0[i]].leaves++\r\n                                    if not node[k0[i]].firstLeaf \r\n                                        node[k0[i]].firstLeaf = acc[curVal]\r\n                                    node = node[k0[i]]\r\n                                return tree\r\n                            return acc[curVal]\r\n                        tree)\r\n                    row++\r\n                    return tree\r\n                tree)\r\n\r\n        setColInitParams = (col) ->\r\n            init = \r\n                colArrow: arrowExpanded\r\n                colClass: classColExpanded\r\n                colClickStatus: clickStatusExpanded\r\n            if col >= colsCollapseAt\r\n                init =\r\n                    colArrow: arrowCollapsed\r\n                    colClass: classColCollapsed\r\n                    colClickStatus: clickStatusCollapsed\r\n            if col >= colDisableFrom\r\n                init =\r\n                    colArrow: \"\"\r\n            return init\r\n\r\n        buildColHeaderHeader = (thead, colHeaderHeaders, rowAttrs, colAttrs, tr, col) ->\r\n            colAttr = colAttrs[col]\r\n            textContent = colAttr\r\n            className = \"pvtAxisLabel\"\r\n            init = setColInitParams col\r\n            if col < colAttrs.length-1\r\n                className += \" \" + init.colClass\r\n                textContent = \" \" + init.colArrow + \" \" + colAttr if not (isColDisableExpandCollapse or isColDisable or col > colDisableAfter)\r\n            th = createElement \"th\", className, textContent\r\n            th.setAttribute \"data-colAttr\", colAttr\r\n            tr.appendChild th\r\n            colHeaderHeaders.push {\r\n                tr: tr,\r\n                th: th,\r\n                clickStatus: init.colClickStatus,\r\n                expandedCount: 0,\r\n                nHeaders: 0}\r\n            thead.appendChild tr\r\n\r\n        buildColHeaderHeaders = (thead, colHeaderHeaders, rowAttrs, colAttrs) ->\r\n            tr = createElement \"tr\"\r\n            if rowAttrs.length != 0\r\n                tr.appendChild createElement \"th\", null, null, {\r\n                    colspan: rowAttrs.length,\r\n                    rowspan: colAttrs.length}\r\n            buildColHeaderHeader thead, colHeaderHeaders, rowAttrs, colAttrs, tr, 0\r\n            for c in [1..colAttrs.length] when c < colAttrs.length\r\n                tr = createElement(\"tr\")\r\n                buildColHeaderHeader thead, colHeaderHeaders, rowAttrs, colAttrs, tr, c\r\n\r\n        buildColHeaderHeadersClickEvents = (colHeaderHeaders, colHeaderCols, colAttrs) ->\r\n            n = colAttrs.length-1\r\n            for i in [0..n] when i < n\r\n                th = colHeaderHeaders[i].th\r\n                colAttr = colAttrs[i]\r\n                th.onclick = (event) ->\r\n                    event = event || window.event\r\n                    toggleColHeaderHeader colHeaderHeaders, colHeaderCols, colAttrs, event.target.getAttribute \"data-colAttr\"\r\n\r\n        buildColHeader = (colHeaderHeaders, colHeaderCols, h, rowAttrs, colAttrs, node) ->\r\n            # DF Recurse\r\n            for chKey in h.children\r\n                buildColHeader colHeaderHeaders, colHeaderCols, h[chKey], rowAttrs, colAttrs, node\r\n            # Process\r\n            init = setColInitParams h.col\r\n            hh = colHeaderHeaders[h.col]\r\n            ++hh.expandedCount if h.col <= colsCollapseAt\r\n            ++hh.nHeaders\r\n\r\n            firstChild = h[h.children[0]] if h.children.length isnt 0\r\n            addClass h.th, \"#{classColShow} col#{h.row} colcol#{h.col}\"\r\n            h.th.setAttribute \"data-colnode\", node.counter\r\n            h.th.colSpan = h.childrenSpan if h.children.length isnt 0\r\n            if h.children.length is 0 and rowAttrs.length isnt 0\r\n                h.th.rowSpan = 2\r\n            if h.leaves > 1 and not (isColDisable or h.col >= colDisableFrom)\r\n                if not isColDisableExpandCollapse\r\n                    h.th.textContent = \"#{init.colArrow} #{h.text}\"\r\n                    h.th.onclick = (event) ->\r\n                        event = event || window.event\r\n                        toggleCol colHeaderHeaders, colHeaderCols, parseInt event.target.getAttribute \"data-colnode\"\r\n                if h.children.length > 1\r\n                    h.sTh = createElement \"th\", \"pvtColLabelFiller pvtColSubtotal\"\r\n                    h.sTh.rowSpan = colAttrs.length-h.col\r\n                    h.sTh.style.display = \"none\" if (isColHideOnExpand and h.col < colsCollapseAt) or h.col > colsCollapseAt\r\n                    firstChild.tr.appendChild h.sTh\r\n                    h.th.colSpan++\r\n\r\n            h.parent?.childrenSpan += h.th.colSpan\r\n\r\n            h.clickStatus = init.colClickStatus\r\n            hh.tr.appendChild h.th\r\n            h.tr = hh.tr\r\n            colHeaderCols.push h\r\n            node.counter++\r\n\r\n        setRowInitParams = (col) ->\r\n            init = \r\n                rowArrow: arrowExpanded\r\n                rowClass: classRowExpanded\r\n                rowClickStatus: clickStatusExpanded\r\n            if col >= rowsCollapseAt\r\n                init =\r\n                    rowArrow: arrowCollapsed\r\n                    rowClass: classRowCollapsed\r\n                    rowClickStatus: clickStatusCollapsed\r\n            if col >= rowDisableFrom\r\n                init =\r\n                    rowArrow: \"\"\r\n            return init\r\n\r\n        buildRowHeaderHeaders = (thead, rowHeaderHeaders, rowAttrs, colAttrs) ->\r\n            tr = createElement \"tr\"\r\n            rowHeaderHeaders.hh = []\r\n            for own i, rowAttr of rowAttrs\r\n                textContent = rowAttr\r\n                className = \"pvtAxisLabel\"\r\n                if i < rowAttrs.length-1\r\n                    className += \" expanded\"\r\n                    textContent = \" \" + arrowExpanded + \" \" + rowAttr if not (isRowDisableExpandCollapse or i >= rowDisableFrom or i >= rowsCollapseAt)\r\n                th = createElement \"th\", className, textContent\r\n                th.setAttribute \"data-rowAttr\", rowAttr\r\n                tr.appendChild th\r\n                rowHeaderHeaders.hh.push \r\n                    th: th,\r\n                    clickStatus: if i < rowsCollapseAt then clickStatusExpanded else clickStatusCollapsed\r\n                    expandedCount: 0,\r\n                    nHeaders: 0\r\n            if colAttrs.length != 0\r\n                th = createElement \"th\"\r\n                tr.appendChild th\r\n            thead.appendChild tr\r\n            rowHeaderHeaders.tr = tr\r\n\r\n        buildRowHeaderHeadersClickEvents = (rowHeaderHeaders, rowHeaderRows, rowAttrs) ->\r\n            n = rowAttrs.length-1\r\n            for i in [0..n] when i < n\r\n                th = rowHeaderHeaders.hh[i]\r\n                rowAttr = rowAttrs[i]\r\n                th.th.onclick = (event) ->\r\n                    event = event || window.event\r\n                    toggleRowHeaderHeader rowHeaderHeaders, rowHeaderRows, rowAttrs, event.target.getAttribute \"data-rowAttr\"\r\n\r\n        buildRowTotalsHeader = (tr, rowAttrs, colAttrs) ->\r\n            rowspan = 1\r\n            if colAttrs.length != 0\r\n                rowspan = colAttrs.length + (if rowAttrs.length == 0 then 0 else 1)\r\n            th = createElement \"th\", \"pvtTotalLabel rowTotal\", opts.localeStrings.totals, {rowspan: rowspan}\r\n            tr.appendChild th\r\n\r\n        buildRowHeader = (tbody, rowHeaderHeaders, rowHeaderRows, h, rowAttrs, colAttrs, node) ->\r\n            # DF Recurse\r\n            for chKey in h.children\r\n                buildRowHeader tbody, rowHeaderHeaders, rowHeaderRows, h[chKey], rowAttrs, colAttrs, node\r\n\r\n            # Process\r\n            hh = rowHeaderHeaders.hh[h.col]\r\n            ++hh.expandedCount if h.col <= rowsCollapseAt\r\n            ++hh.nHeaders\r\n\r\n            init = setRowInitParams h.col\r\n            firstChild = h[h.children[0]] if h.children.length isnt 0\r\n\r\n            addClass h.th, \"pvtRowSubtotal row#{h.row} rowcol#{h.col}\"\r\n            h.th.setAttribute \"data-rownode\", node.counter\r\n            h.th.colSpan = 2 if h.col is rowAttrs.length-1 and colAttrs.length isnt 0\r\n            h.th.rowSpan = h.childrenSpan if h.children.length isnt 0\r\n\r\n            if (isDisplayOnTop and h.children.length is 1) or (not isDisplayOnTop and h.children.length isnt 0)\r\n                h.tr = firstChild.tr\r\n                h.tr.insertBefore h.th, firstChild.th\r\n            else\r\n                h.tr = createElement \"tr\", \"pvtRowSubtotal row#{h.row}\"\r\n                h.tr.appendChild h.th\r\n\r\n            if h.leaves > 1 and not (isRowDisable or h.col >= rowDisableFrom)\r\n                if not isRowDisableExpandCollapse\r\n                    addClass h.th, init.rowClass\r\n                    h.th.textContent = \"#{init.rowArrow} #{h.text}\"\r\n                    h.th.onclick = (event) ->\r\n                        event = event || window.event\r\n                        toggleRow rowHeaderHeaders, rowHeaderRows, parseInt event.target.getAttribute \"data-rownode\"\r\n\r\n                if h.children.length > 1\r\n                    h.sTh = createElement \"th\", \"pvtRowLabelFiller pvtRowSubtotal row#{h.row} rowcol#{h.col} #{init.rowClass}\"\r\n                    h.sTh.colSpan = rowAttrs.length-(h.col+1) + if colAttrs.length != 0 then 1 else 0 \r\n                    h.sTh.style.display = \"none\" if (isRowHideOnExpand and h.col < rowsCollapseAt) or h.col > rowsCollapseAt\r\n                    h.th.rowSpan++\r\n\r\n                    addClass h.tr, init.rowClass\r\n                    if isDisplayOnTop\r\n                        h.tr.appendChild h.sTh\r\n                    else\r\n                        h.sTr = createElement \"tr\", \"pvtRowSubtotal row#{h.row} #{init.rowClass}\"\r\n                        h.sTr.appendChild h.sTh\r\n                        tbody.appendChild h.sTr\r\n                tbody.insertBefore h.tr, firstChild.tr\r\n            else\r\n                tbody.appendChild h.tr if h.children.length is 0\r\n\r\n            h.parent?.childrenSpan += h.th.rowSpan\r\n\r\n            h.clickStatus = init.rowClickStatus\r\n            rowHeaderRows.push h\r\n            node.counter++\r\n\r\n\r\n        buildValues = (tbody, rowHeaderRows, colHeaderCols) ->\r\n            for rowHeader in rowHeaderRows\r\n                rowInit = setRowInitParams rowHeader.col\r\n                flatRowKey = rowHeader.flatKey\r\n                isRowSubtotal = rowHeader.descendants != 0;\r\n                for colHeader in colHeaderCols\r\n                    flatColKey = colHeader.flatKey\r\n                    aggregator = tree[flatRowKey][flatColKey] ? {value: (-> null), format: -> \"\"}\r\n                    val = aggregator.value()\r\n                    isColSubtotal = colHeader.descendants != 0;\r\n                    colInit = setColInitParams colHeader.col\r\n                    style = \"pvtVal\"\r\n                    style += \" pvtColSubtotal #{colInit.colClass}\" if isColSubtotal\r\n                    style += \" pvtRowSubtotal #{rowInit.rowClass}\" if isRowSubtotal\r\n                    style += if (isRowSubtotal and (rowHeader.col >= rowDisableFrom or (isRowHideOnExpand and rowHeader.col < rowsCollapseAt))) or (rowHeader.col > rowsCollapseAt) then \" #{classRowHide}\" else \" #{classRowShow}\"\r\n                    style += if (isColSubtotal and (isColDisable or colHeader.col > colDisableAfter or (isColHideOnExpand and colHeader.col < colsCollapseAt))) or (colHeader.col > colsCollapseAt) then \" #{classColHide}\" else \" #{classColShow}\"\r\n                    style += \" row#{rowHeader.row}\" +\r\n                        \" col#{colHeader.row}\" +\r\n                        \" rowcol#{rowHeader.col}\" +\r\n                        \" colcol#{colHeader.col}\"\r\n                    eventHandlers = getTableEventHandlers val, rowHeader.key, colHeader.key\r\n                    td = createElement \"td\", style, aggregator.format(val),\r\n                        \"data-value\": val,\r\n                        \"data-rownode\": rowHeader.node,\r\n                        \"data-colnode\": colHeader.node, eventHandlers\r\n                    if not isDisplayOnTop\r\n                        td.style.display = \"none\" if (rowHeader.col > rowsCollapseAt or colHeader.col > colsCollapseAt) or (isRowSubtotal and (rowHeader.col >= rowDisableFrom or (isRowHideOnExpand and rowHeader.col < rowsCollapseAt))) or (isColSubtotal and (isColDisable or colHeader.col > colDisableAfter or (isColHideOnExpand and colHeader.col < colsCollapseAt)))\r\n                    \r\n                    rowHeader.tr.appendChild td\r\n\r\n                # buildRowTotal\r\n                totalAggregator = rowTotals[flatRowKey]\r\n                val = totalAggregator.value()\r\n                style = \"pvtTotal rowTotal #{rowInit.rowClass}\"\r\n                style += \" pvtRowSubtotal \" if isRowSubtotal \r\n                style += if isRowSubtotal and (rowHeader.col >= rowDisableFrom or not isDisplayOnTop or (isRowHideOnExpand and rowHeader.col < rowsCollapseAt)) then \" #{classRowHide}\" else \" #{classRowShow}\"\r\n                style += \" row#{rowHeader.row} rowcol#{rowHeader.col}\"\r\n                td = createElement \"td\", style, totalAggregator.format(val),\r\n                    \"data-value\": val,\r\n                    \"data-row\": \"row#{rowHeader.row}\",\r\n                    \"data-rowcol\": \"col#{rowHeader.col}\",\r\n                    \"data-rownode\": rowHeader.node, getTableEventHandlers val, rowHeader.key, []\r\n                if not isDisplayOnTop\r\n                    td.style.display = \"none\" if (rowHeader.col > rowsCollapseAt) or  (isRowSubtotal and (rowHeader.col >= rowDisableFrom or (isRowHideOnExpand and rowHeader.col < rowsCollapseAt)))\r\n                rowHeader.tr.appendChild td\r\n\r\n        buildColTotalsHeader = (rowAttrs, colAttrs) ->\r\n            tr = createElement \"tr\"\r\n            colspan = rowAttrs.length + (if colAttrs.length == 0 then 0 else 1)\r\n            th = createElement \"th\", \"pvtTotalLabel colTotal\", opts.localeStrings.totals, {colspan: colspan}\r\n            tr.appendChild th\r\n            return tr\r\n\r\n        buildColTotals = (tr, colHeaderCols) ->\r\n            for h in colHeaderCols when h.children.length isnt 1\r\n                isColSubtotal = h.descendants != 0\r\n                totalAggregator = colTotals[h.flatKey]\r\n                val = totalAggregator.value()\r\n                colInit = setColInitParams h.col\r\n                clsNames = \"pvtVal pvtTotal colTotal #{colInit.colClass} col#{h.row} colcol#{h.col}\"\r\n                clsNames += \" pvtColSubtotal\" if isColSubtotal\r\n                td = createElement \"td\", clsNames, totalAggregator.format(val),\r\n                    \"data-value\": val\r\n                    \"data-for\": \"col#{h.col}\"\r\n                    \"data-colnode\": \"#{h.node}\", getTableEventHandlers val, [], h.key\r\n                td.style.display = \"none\" if (h.col > colsCollapseAt) or (isColSubtotal and (isColDisable or h.col > colDisableAfter or (isColHideOnExpand and h.col < colsCollapseAt)))\r\n                tr.appendChild td\r\n\r\n        buildGrandTotal = (result, tr) ->\r\n            totalAggregator = allTotal\r\n            val = totalAggregator.value()\r\n            td = createElement \"td\", \"pvtGrandTotal\", totalAggregator.format(val),\r\n                {\"data-value\": val},\r\n                getTableEventHandlers val, [], []\r\n            tr.appendChild td\r\n            result.appendChild tr\r\n\r\n\r\n        hideDescendantCol = (d) ->\r\n            $(d.th).closest 'table.pvtTable'\r\n                .find \"tbody tr td[data-colnode=\\\"#{d.node}\\\"], th[data-colnode=\\\"#{d.node}\\\"]\" \r\n                .removeClass classColShow \r\n                .addClass classColHide \r\n                .css 'display', \"none\" \r\n\r\n        collapseShowColSubtotal = (h) ->\r\n            $(h.th).closest 'table.pvtTable'\r\n                .find \"tbody tr td[data-colnode=\\\"#{h.node}\\\"], th[data-colnode=\\\"#{h.node}\\\"]\" \r\n                .removeClass \"#{classColExpanded} #{classColHide}\"\r\n                .addClass \"#{classColCollapsed} #{classColShow}\"\r\n                .not \".pvtRowSubtotal.#{classRowHide}\"\r\n                .css 'display', \"\" \r\n            h.th.textContent = \" \" + arrowCollapsed + \" \" + h.th.getAttribute \"data-colheader\"\r\n            h.th.colSpan = 1\r\n\r\n        collapseCol = (colHeaderHeaders, colHeaderCols, c) ->\r\n            return if isColDisable or isColDisableExpandCollapse or not colHeaderCols[c]\r\n\r\n            h = colHeaderCols[c]\r\n            return if h.col > colDisableAfter\r\n            return if h.clickStatus is clickStatusCollapsed\r\n\r\n            isColSubtotal = h.descendants != 0\r\n            colspan = h.th.colSpan \r\n            for i in [1..h.descendants] when h.descendants != 0\r\n                d = colHeaderCols[c-i]\r\n                hideDescendantCol d\r\n            if isColSubtotal \r\n                collapseShowColSubtotal h\r\n                --colspan\r\n            p = h.parent\r\n            while p isnt null\r\n                p.th.colSpan -= colspan\r\n                p = p.parent\r\n            h.clickStatus = clickStatusCollapsed\r\n            colHeaderHeader = colHeaderHeaders[h.col]\r\n            colHeaderHeader.expandedCount--\r\n            if colHeaderHeader.expandedCount == 0\r\n                for i in [h.col..colHeaderHeaders.length-2] when i <= colDisableAfter\r\n                    colHeaderHeader = colHeaderHeaders[i]\r\n                    replaceClass colHeaderHeader.th, classExpanded, classCollapsed\r\n                    colHeaderHeader.th.textContent = \" \" + arrowCollapsed + \" \" + colHeaderHeader.th.getAttribute \"data-colAttr\"\r\n                    colHeaderHeader.clickStatus = clickStatusCollapsed\r\n\r\n        showChildCol = (ch) ->\r\n            $(ch.th).closest 'table.pvtTable'\r\n                .find \"tbody tr td[data-colnode=\\\"#{ch.node}\\\"], th[data-colnode=\\\"#{ch.node}\\\"]\" \r\n                .removeClass classColHide\r\n                .addClass classColShow\r\n                .not \".pvtRowSubtotal.#{classRowHide}\"\r\n                .css 'display', \"\" \r\n\r\n        expandHideColSubtotal = (h) ->\r\n            $(h.th).closest 'table.pvtTable'\r\n                .find \"tbody tr td[data-colnode=\\\"#{h.node}\\\"], th[data-colnode=\\\"#{h.node}\\\"]\" \r\n                .removeClass \"#{classColCollapsed} #{classColShow}\" \r\n                .addClass \"#{classColExpanded} #{classColHide}\" \r\n                .css 'display', \"none\" \r\n            h.th.style.display = \"\"\r\n\r\n        expandShowColSubtotal = (h) ->\r\n            $(h.th).closest 'table.pvtTable'\r\n                .find \"tbody tr td[data-colnode=\\\"#{h.node}\\\"], th[data-colnode=\\\"#{h.node}\\\"]\" \r\n                .removeClass \"#{classColCollapsed} #{classColHide}\"\r\n                .addClass \"#{classColExpanded} #{classColShow}\"\r\n                .not \".pvtRowSubtotal.#{classRowHide}\"\r\n                .css 'display', \"\" \r\n            h.th.style.display = \"\"\r\n            ++h.th.colSpan\r\n            h.sTh.style.display = \"\" if h.sTh?\r\n\r\n        expandChildCol = (ch) ->\r\n            if ch.descendants != 0 and hasClass(ch.th, classColExpanded) and (isColDisable or ch.col > colDisableAfter or isColHideOnExpand)\r\n                ch.th.style.display = \"\"\r\n            else\r\n                showChildCol ch\r\n            expandChildCol gch for gch in ch.children if ch.clickStatus isnt clickStatusCollapsed\r\n\r\n        expandCol = (colHeaderHeaders, colHeaderCols, c) ->\r\n            return if isColDisable\r\n            return if isColDisableExpandCollapse\r\n            return if not colHeaderCols[c]\r\n\r\n            h = colHeaderCols[c]\r\n            return if h.col > colDisableAfter\r\n            return if h.clickStatus is clickStatusExpanded\r\n\r\n            isColSubtotal = h.descendants != 0\r\n            colspan = 0\r\n            for ch in h.children\r\n                expandChildCol ch\r\n                colspan += ch.th.colSpan\r\n            h.th.colSpan = colspan\r\n            if isColSubtotal\r\n                replaceClass h.th, classColCollapsed, classColExpanded\r\n                h.th.textContent = \" \" + arrowExpanded + \" \" + h.th.getAttribute \"data-colHeader\"\r\n                if isColHideOnExpand\r\n                    expandHideColSubtotal h\r\n                    --colspan\r\n                else\r\n                    expandShowColSubtotal h\r\n            p = h.parent\r\n            while p\r\n                p.th.colSpan += colspan\r\n                p = p.parent\r\n            h.clickStatus = clickStatusExpanded\r\n            hh = colHeaderHeaders[h.col]\r\n            ++hh.expandedCount\r\n            if hh.expandedCount is hh.nHeaders\r\n                replaceClass hh.th, classCollapsed, classExpanded\r\n                hh.th.textContent = \" \" + arrowExpanded + \" \" + hh.th.getAttribute \"data-colAttr\"\r\n                hh.clickStatus = clickStatusExpanded\r\n\r\n        hideDescendantRow = (d) ->\r\n            d.tr.style.display = \"none\" if isDisplayOnTop\r\n            cells = d.tr.getElementsByTagName \"td\"\r\n            replaceClass cell, classRowShow, classRowHide for cell in cells\r\n            if not isDisplayOnTop\r\n                cell.style.display = \"none\" for cell in cells\r\n                d.sTh.style.display = \"none\" if d.sTh\r\n                d.th.style.display = \"none\"\r\n\r\n        collapseShowRowSubtotal = (h) ->\r\n            cells = h.tr.getElementsByTagName \"td\" \r\n            for cell in cells\r\n                removeClass cell, \"#{classRowExpanded} #{classRowHide}\"\r\n                addClass cell, \"#{classRowCollapsed} #{classRowShow}\"\r\n                cell.style.display = \"\" if not hasClass cell, classColHide\r\n            h.sTh.textContent = \" \" + arrowCollapsed + \" \" + h.sTh.getAttribute \"data-rowHeader\"\r\n            replaceClass h.sTh, classRowExpanded, classRowCollapsed\r\n            replaceClass h.tr, classRowExpanded, classRowCollapsed\r\n            h.tr.style.display = \"\"\r\n\r\n        collapseRow = (rowHeaderHeaders, rowHeaderRows, r) ->\r\n            h = rowHeaderRows[r]\r\n            return if not h or h.clickStatus is clickStatusCollapsed or h.col >= rowDisableFrom or isRowDisableExpandCollapse \r\n\r\n            rowSpan = h.th.rowSpan\r\n            isRowSubtotal = h.descendants != 0\r\n            for i in [1..h.descendants] when h.descendants != 0\r\n                d = rowHeaderRows[r-i]\r\n                hideDescendantRow d\r\n            h.th.style.display = \"none\" if not isDisplayOnTop\r\n            collapseShowRowSubtotal h if isRowSubtotal\r\n            if isDisplayOnTop\r\n                p = h.parent\r\n                while p\r\n                    p.th.rowSpan -= rowSpan\r\n                    p = p.parent\r\n            h.clickStatus = clickStatusCollapsed\r\n\r\n            hh = rowHeaderHeaders.hh[h.col]\r\n            hh.expandedCount--\r\n\r\n            return if hh.expandedCount != 0\r\n\r\n            for j in [h.col..rowHeaderHeaders.hh.length-2] when j < rowDisableFrom\r\n                hh = rowHeaderHeaders.hh[j]\r\n                replaceClass hh.th, classExpanded, classCollapsed\r\n                hh.th.textContent = \" \" + arrowCollapsed + \" \" + hh.th.getAttribute \"data-rowAttr\"\r\n                hh.clickStatus = clickStatusCollapsed\r\n\r\n        showChildRow = (h) ->\r\n            cells = h.tr.getElementsByTagName \"td\" \r\n            for cell in cells\r\n                replaceClass cell, classRowHide, classRowShow\r\n            if not isDisplayOnTop\r\n                cell.style.display = \"\" for cell in cells when not hasClass cell, classColHide\r\n                h.th.style.display = \"\" if h.descendants == 0 or h.clickStatus isnt clickStatusCollapsed\r\n                h.sTh.style.display = \"\" if h.sTh\r\n            h.tr.style.display = \"\"\r\n\r\n        expandShowRowSubtotal = (h) ->\r\n            cells = h.tr.getElementsByTagName \"td\"\r\n            for cell in cells\r\n                removeClass cell, \"#{classRowCollapsed} #{classRowHide}\"\r\n                addClass cell, \"#{classRowExpanded} #{classRowShow}\" \r\n                cell.style.display = \"\" if not hasClass cell, classColHide\r\n            h.sTh.textContent = \" \" + arrowExpanded + \" \" + h.sTh.getAttribute \"data-rowHeader\"\r\n            h.sTh.style.display = \"\"\r\n            replaceClass h.sTh, classRowCollapsed, classRowExpanded\r\n            h.th.style.display = \"\"\r\n            replaceClass h.th, classRowCollapsed, classRowExpanded\r\n            replaceClass h.tr, classRowCollapsed, classRowExpanded\r\n            h.tr.style.display = \"\"\r\n\r\n        expandHideRowSubtotal = (h) ->\r\n            cells = h.tr.getElementsByTagName \"td\"\r\n            for cell in cells\r\n                removeClass cell, \"#{classRowCollapsed} #{classRowShow}\"\r\n                addClass cell, \"#{classRowExpanded} #{classRowHide}\"\r\n            h.th.textContent = \" \" + arrowExpanded + \" \" + h.th.getAttribute \"data-rowHeader\"\r\n            h.th.style.display = \"\"\r\n            replaceClass h.tr, classRowCollapsed, classRowExpanded\r\n            h.tr.style.display = \"none\"\r\n\r\n        expandChildRow = (ch) ->\r\n            nShown = 0\r\n            if ch.descendants != 0\r\n                showChildRow ch\r\n                nShown++\r\n                nShown += expandChildRow gch for gch in ch.children when ch.clickStatus isnt clickStatusCollapsed\r\n            else\r\n                showChildRow ch\r\n                nShown++\r\n            return nShown\r\n\r\n        expandRow = (rowHeaderHeaders, rowHeaderRows, r) ->\r\n            h = rowHeaderRows[r]\r\n            return if not h or h.clickStatus is clickStatusExpanded or isRowDisableExpandCollapse or h.col >= rowDisableFrom\r\n\r\n            isRowSubtotal = h.descendants != 0\r\n            nShown = 0\r\n            for ch in h.children\r\n                nShown +=  expandChildRow ch, 0\r\n            if isRowSubtotal\r\n                if isRowHideOnExpand\r\n                    expandHideRowSubtotal h\r\n                else\r\n                    expandShowRowSubtotal h\r\n            if isDisplayOnTop\r\n                h.th.rowSpan = nShown\r\n                p = h.parent\r\n                while p\r\n                    p.th.rowSpan += nShown\r\n                    p = p.parent\r\n            h.clickStatus = clickStatusExpanded\r\n            hh = rowHeaderHeaders.hh[h.col]\r\n            ++hh.expandedCount\r\n            if hh.expandedCount == hh.nHeaders\r\n                replaceClass hh.th, classCollapsed, classExpanded\r\n                hh.th.textContent = \" \" + arrowExpanded + \" \" + hh.th.getAttribute \"data-rowAttr\"\r\n                hh.clickStatus = clickStatusExpanded\r\n\r\n        toggleCol = (colHeaderHeaders, colHeaderCols, c) ->\r\n            return if not colHeaderCols[c]?\r\n\r\n            h = colHeaderCols[c]\r\n            if h.clickStatus is clickStatusCollapsed\r\n                expandCol(colHeaderHeaders, colHeaderCols, c)\r\n            else\r\n                collapseCol(colHeaderHeaders, colHeaderCols, c)\r\n            h.th.scrollIntoView\r\n\r\n        toggleRow = (rowHeaderHeaders, rowHeaderRows, r) ->\r\n            h = rowHeaderRows[r]\r\n            return if not h\r\n\r\n            if h.clickStatus is clickStatusCollapsed\r\n                expandRow(rowHeaderHeaders, rowHeaderRows, r)\r\n            else\r\n                collapseRow(rowHeaderHeaders, rowHeaderRows, r)\r\n\r\n        collapseColsAt = (colHeaderHeaders, colHeaderCols, colAttrs, colAttr) ->\r\n            return if isColDisable\r\n            if typeof colAttr is 'string'\r\n                idx = colAttrs.indexOf colAttr\r\n            else\r\n                idx = colAttr\r\n            return if idx < 0 or idx == colAttrs.length-1\r\n            i = idx\r\n            nAttrs = colAttrs.length-1\r\n            while i < nAttrs and i <= colDisableAfter\r\n                hh = colHeaderHeaders[i]\r\n                replaceClass hh.th, classExpanded, classCollapsed\r\n                hh.th.textContent = \" \" + arrowCollapsed + \" \" + colAttrs[i]\r\n                hh.clickStatus = clickStatusCollapsed\r\n                ++i\r\n            i = 0\r\n            nCols = colHeaderCols.length\r\n            while i < nCols\r\n                h = colHeaderCols[i]\r\n                if h.col is idx and h.clickStatus isnt clickStatusCollapsed and h.th.style.display isnt \"none\"\r\n                    collapseCol colHeaderHeaders, colHeaderCols, parseInt h.th.getAttribute(\"data-colnode\")\r\n                ++i\r\n\r\n        expandColsAt = (colHeaderHeaders, colHeaderCols, colAttrs, colAttr) ->\r\n            return if isColDisable\r\n            if typeof colAttr is 'string'\r\n                idx = colAttrs.indexOf colAttr\r\n            else\r\n                idx = colAttr\r\n            return if idx < 0 or idx == colAttrs.length-1\r\n            for i in [0..idx]\r\n                if i <= colDisableAfter\r\n                    hh = colHeaderHeaders[i]\r\n                    replaceClass hh.th, classCollapsed, classExpanded\r\n                    hh.th.textContent = \" \" + arrowExpanded + \" \" + colAttrs[i]\r\n                    hh.clickStatus = clickStatusExpanded\r\n                j = 0\r\n                nCols = colHeaderCols.length\r\n                while j < nCols\r\n                    h = colHeaderCols[j]\r\n                    expandCol colHeaderHeaders, colHeaderCols, j if h.col == i\r\n                    ++j\r\n            ++idx\r\n            while idx < colAttrs.length-1 and idx <= colDisableAfter\r\n                colHeaderHeader = colHeaderHeaders[idx]\r\n                if colHeaderHeader.expandedCount == 0\r\n                    replaceClass colHeaderHeader.th, classExpanded, classCollapsed\r\n                    colHeaderHeader.th.textContent = \" \" + arrowCollapsed + \" \" + colAttrs[idx]\r\n                    colHeaderHeader.clickStatus = clickStatusCollapsed\r\n                else if colHeaderHeader.expandedCount == colHeaderHeader.nHeaders\r\n                    replaceClass colHeaderHeader.th, classCollapsed, classExpanded\r\n                    colHeaderHeader.th.textContent = \" \" + arrowExpanded + \" \" + colAttrs[idx]\r\n                    colHeaderHeader.clickStatus = clickStatusExpanded\r\n                ++idx\r\n\r\n        collapseRowsAt = (rowHeaderHeaders, rowHeaderRows, rowAttrs, rowAttr) ->\r\n            return if isRowDisable\r\n            if typeof rowAttr is 'string'\r\n                idx = rowAttrs.indexOf rowAttr\r\n            else\r\n                idx = rowAttr\r\n\r\n            return if idx < 0 or idx == rowAttrs.length-1\r\n\r\n            i = idx\r\n            nAttrs = rowAttrs.length-1\r\n            while i < nAttrs and i < rowDisableFrom\r\n                h = rowHeaderHeaders.hh[i]\r\n                replaceClass h.th, classExpanded, classCollapsed\r\n                h.th.textContent = \" \" + arrowCollapsed + \" \" + rowAttrs[i]\r\n                h.clickStatus = clickStatusCollapsed\r\n                ++i\r\n            j = 0\r\n            nRows = rowHeaderRows.length\r\n            while j < nRows\r\n                h = rowHeaderRows[j]\r\n                if h.col is idx and h.clickStatus isnt clickStatusCollapsed and h.tr.style.display isnt \"none\"\r\n                    collapseRow rowHeaderHeaders, rowHeaderRows, j\r\n                ++j\r\n\r\n        expandRowsAt = (rowHeaderHeaders, rowHeaderRows, rowAttrs, rowAttr) ->\r\n            return if isRowDisable\r\n            if typeof rowAttr is 'string'\r\n                idx = rowAttrs.indexOf rowAttr\r\n            else\r\n                idx = rowAttr\r\n\r\n            return if idx < 0 or idx == rowAttrs.length-1\r\n\r\n            for i in [0..idx]\r\n                if i < rowDisableFrom\r\n                    hh = rowHeaderHeaders.hh[i]\r\n                    replaceClass hh.th, classCollapsed, classExpanded\r\n                    hh.th.textContent = \" \" + arrowExpanded + \" \" + rowAttrs[i]\r\n                    hh.clickStatus = clickStatusExpanded\r\n                j = 0\r\n                nRows = rowHeaderRows.length\r\n                while j < nRows\r\n                    h = rowHeaderRows[j]\r\n                    expandRow rowHeaderHeaders, rowHeaderRows, j if h.col == i\r\n                    ++j\r\n            ++idx\r\n            while idx < rowAttrs.length-1 and idx < rowDisableFrom\r\n                rowHeaderHeader = rowHeaderHeaders.hh[idx]\r\n                if rowHeaderHeader.expandedCount == 0\r\n                    replaceClass rowHeaderHeader.th, classExpanded, classCollapsed\r\n                    rowHeaderHeader.th.textContent = \" \" + arrowCollapsed + \" \" + rowAttrs[idx]\r\n                    rowHeaderHeader.clickStatus = clickStatusCollapsed\r\n                else if rowHeaderHeader.expandedCount == rowHeaderHeader.nHeaders\r\n                    replaceClass rowHeaderHeader.th, classCollapsed, classExpanded\r\n                    rowHeaderHeader.th.textContent = \" \" + arrowExpanded + \" \" + rowAttrs[idx]\r\n                    rowHeaderHeader.clickStatus = clickStatusExpanded\r\n                ++idx\r\n\r\n        toggleColHeaderHeader = (colHeaderHeaders, colHeaderCols, colAttrs, colAttr) ->\r\n            return if isColDisable\r\n            return if isColDisableExpandCollapse\r\n\r\n            idx = colAttrs.indexOf colAttr\r\n            h = colHeaderHeaders[idx]\r\n            return if h.col > colDisableAfter\r\n            if h.clickStatus is clickStatusCollapsed\r\n                expandColsAt colHeaderHeaders, colHeaderCols, colAttrs, colAttr\r\n            else\r\n                collapseColsAt colHeaderHeaders, colHeaderCols, colAttrs, colAttr\r\n\r\n\r\n        toggleRowHeaderHeader = (rowHeaderHeaders, rowHeaderRows, rowAttrs, rowAttr) ->\r\n            return if isRowDisableExpandCollapse\r\n\r\n            idx = rowAttrs.indexOf rowAttr\r\n            th = rowHeaderHeaders.hh[idx]\r\n            return if th.col >= rowDisableFrom\r\n            if th.clickStatus is clickStatusCollapsed\r\n                expandRowsAt rowHeaderHeaders, rowHeaderRows, rowAttrs, rowAttr\r\n            else\r\n                collapseRowsAt rowHeaderHeaders, rowHeaderRows, rowAttrs, rowAttr\r\n\r\n        main = (rowAttrs, rowKeys, colAttrs, colKeys) ->\r\n            rowHeaders = []\r\n            colHeaders = []\r\n            rowHeaderHeaders = {}\r\n            rowHeaderRows = []\r\n            colHeaderHeaders = []\r\n            colHeaderCols = []\r\n\r\n            rowHeaders = processKeys rowKeys, \"pvtRowLabel\" if rowAttrs.length > 0 and rowKeys.length > 0\r\n            colHeaders = processKeys colKeys, \"pvtColLabel\" if colAttrs.length > 0 and colKeys.length > 0\r\n\r\n            result = createElement \"table\", \"pvtTable\", null, {style: \"display: none;\"}\r\n\r\n            thead = createElement \"thead\"\r\n            result.appendChild thead\r\n\r\n            if colAttrs.length > 0\r\n                buildColHeaderHeaders thead, colHeaderHeaders, rowAttrs, colAttrs\r\n                node = counter: 0\r\n                buildColHeader colHeaderHeaders, colHeaderCols, colHeaders[chKey], rowAttrs, colAttrs, node for chKey in colHeaders.children\r\n                buildColHeaderHeadersClickEvents colHeaderHeaders, colHeaderCols, colAttrs\r\n\r\n            if rowAttrs.length > 0\r\n                buildRowHeaderHeaders thead, rowHeaderHeaders, rowAttrs, colAttrs\r\n                buildRowTotalsHeader rowHeaderHeaders.tr, rowAttrs, colAttrs if colAttrs.length == 0\r\n\r\n            if colAttrs.length > 0\r\n                buildRowTotalsHeader colHeaderHeaders[0].tr, rowAttrs, colAttrs\r\n\r\n            tbody = createElement \"tbody\"\r\n            result.appendChild tbody\r\n            node = counter: 0\r\n            buildRowHeader tbody, rowHeaderHeaders, rowHeaderRows, rowHeaders[chKey], rowAttrs, colAttrs, node for chKey in rowHeaders.children if rowAttrs.length > 0\r\n            buildRowHeaderHeadersClickEvents rowHeaderHeaders, rowHeaderRows, rowAttrs\r\n            # buildValues tbody, rowHeaderRows, colHeaderCols\r\n            tr = buildColTotalsHeader rowAttrs, colAttrs\r\n            buildColTotals tr, colHeaderCols if colAttrs.length > 0\r\n            buildGrandTotal tbody, tr\r\n\r\n            result.setAttribute \"data-numrows\", rowKeys.length\r\n            result.setAttribute \"data-numcols\", colKeys.length\r\n            result.style.display = \"\"\r\n\r\n            return result\r\n\r\n        return main rowAttrs, rowKeys, colAttrs, colKeys\r\n\r\n    $.pivotUtilities.subtotal_renderers =\r\n        \"Table With Subtotal\":  (pvtData, opts) -> SubtotalRenderer pvtData, opts\r\n        \"Table With Subtotal Bar Chart\":   (pvtData, opts) -> $(SubtotalRenderer pvtData, opts).barchart()\r\n        \"Table With Subtotal Heatmap\":   (pvtData, opts) -> $(SubtotalRenderer pvtData, opts).heatmap \"heatmap\", opts\r\n        \"Table With Subtotal Row Heatmap\":   (pvtData, opts) -> $(SubtotalRenderer pvtData, opts).heatmap \"rowheatmap\", opts\r\n        \"Table With Subtotal Col Heatmap\":  (pvtData, opts) -> $(SubtotalRenderer pvtData, opts).heatmap \"colheatmap\", opts\r\n\r\n    #\r\n    # \r\n    # Aggregators\r\n    # \r\n    #\r\n\r\n    usFmtPct = $.pivotUtilities.numberFormat digitsAfterDecimal:1, scaler: 100, suffix: \"%\"\r\n    aggregatorTemplates = $.pivotUtilities.aggregatorTemplates;\r\n\r\n    subtotalAggregatorTemplates =\r\n        fractionOf: (wrapped, type=\"row\", formatter=usFmtPct) -> (x...) -> (data, rowKey, colKey) ->\r\n            rowKey = [] if typeof rowKey is \"undefined\"\r\n            colKey = [] if typeof colKey is \"undefined\"\r\n            selector: {row: [rowKey.slice(0, -1),[]], col: [[], colKey.slice(0, -1)]}[type]\r\n            inner: wrapped(x...)(data, rowKey, colKey)\r\n            push: (record) -> @inner.push record\r\n            format: formatter\r\n            value: -> @inner.value() / data.getAggregator(@selector...).inner.value()\r\n            numInputs: wrapped(x...)().numInputs\r\n\r\n    $.pivotUtilities.subtotalAggregatorTemplates = subtotalAggregatorTemplates\r\n\r\n    $.pivotUtilities.subtotal_aggregators = do (tpl = aggregatorTemplates, sTpl = subtotalAggregatorTemplates) ->\r\n        \"Sum As Fraction Of Parent Row\":        sTpl.fractionOf(tpl.sum(), \"row\", usFmtPct)\r\n        \"Sum As Fraction Of Parent Column\":     sTpl.fractionOf(tpl.sum(), \"col\", usFmtPct)\r\n        \"Count As Fraction Of Parent Row\":      sTpl.fractionOf(tpl.count(), \"row\", usFmtPct)\r\n        \"Count As Fraction Of Parent Column\":   sTpl.fractionOf(tpl.count(), \"col\", usFmtPct)\r\n\r\n"]}